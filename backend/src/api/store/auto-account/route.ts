import { Modules } from "@medusajs/framework/utils";
import { generatePassword } from "../../../lib/util";
import { EmailTemplates } from "../../../modules/email-notifications/templates";

export const POST = async (req, res) => {
  try {
    const { orderId, email, firstName, lastName } = await req.json();

    if (!orderId || !email) {
      return Response.json(
        {
          success: false,
          message: "L'ID de commande et l'email sont requis",
        },
        { status: 400 }
      );
    }

    console.log(
      `üîç CR√âATION COMPTE AUTO POUR COMMANDE: ${orderId}, Email: ${email}`
    );

    const container = req.scope;
    const userService = container.resolve(Modules.USER);
    const notificationService = container.resolve(Modules.NOTIFICATION);

    // V√©rifier si l'utilisateur existe d√©j√†
    const existingUsers = await userService.list({ email });

    if (existingUsers && existingUsers.length > 0) {
      return Response.json(
        {
          success: false,
          message: "Un compte avec cet email existe d√©j√†",
        },
        { status: 200 }
      );
    }

    // G√©n√©rer un mot de passe al√©atoire
    const password = generatePassword();
    console.log(`üîç MOT DE PASSE G√âN√âR√â: ${password.substring(0, 3)}***`);

    // Cr√©er le compte client
    try {
      const [customer] = await userService.createUsers([
        {
          email: email,
          first_name: firstName || "",
          last_name: lastName || "",
          password: password,
        } as any,
      ]);

      console.log(`üîç COMPTE CLIENT CR√â√â: ${customer?.id || "ERREUR"}`);

      // Envoyer l'email avec les identifiants
      await notificationService.createNotifications({
        to: email,
        channel: "email",
        template: EmailTemplates.ACCOUNT_CREATED,
        data: {
          emailOptions: {
            replyTo: "info@example.com",
            subject: "Votre compte Protection Zen a √©t√© cr√©√©",
          },
          email: email,
          password,
          preview: "Votre compte a √©t√© cr√©√© avec succ√®s",
        },
      });

      console.log(`üîç EMAIL ENVOY√â √Ä: ${email}`);

      return Response.json(
        {
          success: true,
          message: "Compte cr√©√© avec succ√®s",
        },
        { status: 200 }
      );
    } catch (error) {
      console.error("‚ùå ERREUR CR√âATION COMPTE:", error);
      return Response.json(
        {
          success: false,
          message: "Erreur lors de la cr√©ation du compte",
          error: error.message,
        },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error("‚ùå ERREUR G√âN√âRALE:", error);
    return Response.json(
      {
        success: false,
        message: "Erreur serveur",
        error: error.message,
      },
      { status: 500 }
    );
  }
};
