import { Modules } from "@medusajs/framework/utils";
import Stripe from "stripe";
import { generatePassword } from "../../../lib/util";
import { EmailTemplates } from "../../../modules/email-notifications/templates";

export async function POST(req, res) {
  const stripe = new Stripe(process.env.STRIPE_API_KEY || "", {
    apiVersion: "2025-02-24.acacia",
  });

  // V√©rifier la signature Stripe
  const signature = req.headers.get("stripe-signature");
  const body = await req.text();

  try {
    // Construire l'√©v√©nement Stripe
    let event;
    try {
      event = stripe.webhooks.constructEvent(
        body,
        signature,
        process.env.STRIPE_WEBHOOK_SECRET || ""
      );
    } catch (err) {
      console.log(`‚ö†Ô∏è Erreur webhook Stripe: ${err.message}`);
      return new Response(`Erreur webhook: ${err.message}`, { status: 400 });
    }

    // R√©cup√©rer le container pour acc√©der aux services
    const container = req.scope;
    const orderService = container.resolve(Modules.ORDER);
    const userService = container.resolve(Modules.USER);
    const notificationService = container.resolve(Modules.NOTIFICATION);

    // G√©rer l'√©v√©nement de paiement r√©ussi
    if (event.type === "checkout.session.completed") {
      const session = event.data.object;

      if (!session.metadata?.cart_id) {
        return new Response("Pas de cart_id dans les m√©tadonn√©es", {
          status: 200,
        });
      }

      console.log(`üîç PAIEMENT R√âUSSI POUR: ${session.metadata.cart_id}`);

      try {
        // Trouver la commande li√©e au panier
        const orders = await orderService.list({
          cart_id: session.metadata.cart_id,
        });

        if (!orders || orders.length === 0) {
          console.log("‚ùå Aucune commande trouv√©e pour ce panier");
          return new Response("Commande non trouv√©e", { status: 200 });
        }

        const order = orders[0];
        console.log(`üîç COMMANDE TROUV√âE: ${order.id}, Email: ${order.email}`);

        // V√©rifier si un client existe d√©j√† pour cet email
        if (!order.customer_id) {
          console.log("üîç CLIENT INVIT√â D√âTECT√â - CR√âATION DE COMPTE");

          // G√©n√©rer un mot de passe al√©atoire
          const password = generatePassword();
          console.log(`üîç MOT DE PASSE G√âN√âR√â: ${password.substring(0, 3)}***`);

          try {
            // Cr√©er le compte client
            const [customer] = await userService.createUsers([
              {
                email: order.email,
                first_name: order.shipping_address?.first_name || "",
                last_name: order.shipping_address?.last_name || "",
                password: password,
              } as any,
            ]);

            if (customer) {
              console.log(`üîç COMPTE CLIENT CR√â√â: ${customer.id}`);

              // Rattacher la commande au client
              await orderService.update(order.id, {
                customer_id: customer.id,
              });

              console.log(`üîç COMMANDE RATTACH√âE AU CLIENT: ${customer.id}`);

              // Envoyer l'email avec les identifiants
              await notificationService.createNotifications({
                to: order.email,
                channel: "email",
                template: EmailTemplates.ACCOUNT_CREATED,
                data: {
                  emailOptions: {
                    replyTo:
                      process.env.RESEND_FROM || "noreply@votredomaine.com",
                    subject: "Votre compte Protection Zen a √©t√© cr√©√©",
                  },
                  email: order.email,
                  password,
                  preview: "Votre compte a √©t√© cr√©√© avec succ√®s",
                },
              });

              console.log(`üîç EMAIL ENVOY√â √Ä: ${order.email}`);
            }
          } catch (error) {
            console.error("‚ùå ERREUR CR√âATION COMPTE:", error);
          }
        } else {
          console.log("üîç CLIENT EXISTANT - PAS DE CR√âATION DE COMPTE");
        }
      } catch (error) {
        console.error("‚ùå ERREUR TRAITEMENT COMMANDE:", error);
      }
    }

    // R√©pondre avec succ√®s
    return new Response(JSON.stringify({ received: true }), { status: 200 });
  } catch (error) {
    console.error("‚ùå ERREUR G√âN√âRALE WEBHOOK:", error);
    return new Response(`Erreur webhook: ${error.message}`, { status: 500 });
  }
}
